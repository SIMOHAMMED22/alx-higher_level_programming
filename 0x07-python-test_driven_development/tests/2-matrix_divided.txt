#2-matrix_divided.txt

==============================
How to use 2-matrix_divided.py
==============================

This module contains only one function called "matrix_divided()".

The function takes two arguments:

matrix: a matrix (list of lists) of floats/integers
div: a non-zero int or a float

Numbers
=======

"matrix_divided()" divides all the numbers in "matrix" by "div" and returns
a new matrix populated with the new values.

The elements of matrix can be ints, floats, or a mixture of both.

::

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> import math
	>>> mat1 = [
	...	[11, 12, 13],
	...	[7.0, 7.5, 8.0],
	...	[-2.83, -3.0, -3.17]]

	>>> matrix_divided(mat1, 3)
	[[3.67, 4.0, 4.33], [2.33, 2.5, 2.67], [-0.94, -1.0, -1.06]]

	>>> mat2 = [
	...	[1, 2, 3],
	...	[4, 5, 6]]

	>>> matrix_divided(mat2, 2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

	>>> mat3 = [
	...	[0, 16, 982],
	...	[35, 0, -625],
	...	[13.726, -723, 0]]

	>>> matrix_divided(mat3, 15)
	[[0.0, 1.07, 65.47], [2.33, 0.0, -41.67], [0.92, -48.2, 0.0]]

	>>> matrix_divided(mat3, 3.14)
	[[0.0, 5.1, 312.74], [11.15, 0.0, -199.04], [4.37, -230.25, 0.0]]

	>>> matrix_divided(mat3, -3.14)
	[[-0.0, -5.1, -312.74], [-11.15, -0.0, 199.04], [-4.37, 230.25, -0.0]]

	>>> mat4 = [[1, 2, 3]]
	>>> matrix_divided(mat4, 11)
	[[0.09, 0.18, 0.27]]

	>>> matrix_divided([[1, 2], [1, 2]], math.inf)
	[[0.0, 0.0], [0.0, 0.0]]

The original matrix remains unchanged

::
	>>> mat1
	[[11, 12, 13], [7.0, 7.5, 8.0], [-2.83, -3.0, -3.17]]

	>>> mat2
	[[1, 2, 3], [4, 5, 6]]

	>>> mat3
	[[0, 16, 982], [35, 0, -625], [13.726, -723, 0]]

	>>> mat4
	[[1, 2, 3]]

Raises
======

A TypeError is raised if:

"div" isn't an integer or a float

::

	>>> matrix_divided(mat1, "word")
	Traceback (most recent call last):
		...
	TypeError: div must be a number

	>>> matrix_divided(mat1, None)
	Traceback (most recent call last):
		...
	TypeError: div must be a number

"matrix" isn't a matrix (a list of lists)

::

	>>> matrix_divided([1, 2, 3], 9)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([], 2)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided("String instead of number", 19)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided(None, 13)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

The rows of "matrix" don't have the same length

::

	>>> matrix_divided([[1, 2], [1, 2, 3]], 3)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

The elements that makes up the rows of "matrix" aren't all ints or floats

::

	>>> matrix_divided([[1, "H"], [2, "M"]], 10)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[], []], 2)
	Traceback (most recent call last):
		...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[]], 2)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

        >>> matrix_divided([[], [1, 2]], 3)
        Traceback (most recent call last):
                ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[1, "H", (92, 83.9, 10), (1+5j)], [2, "M", ["list", 12], 14.34]], 10)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[None, 11, "M"], [True, False]], 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

One or both paremeters are missing

::

	>>> matrix_divided([[1, 2]])
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> matrix_divided()
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

a ZeroDivisionError is raised if "div" is equal to 0.

::

	>>> matrix_divided(mat1, 0)
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero